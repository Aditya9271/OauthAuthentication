I have build a restful api of login authentication using nodejs and angularJs having database of mongoDB and used the authentication of passport and had included JWT for web token which the client will use every time he wants to access any divison of product.

Now let's start with the backend of the product::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Our API will be build with:
	* Normal routes (not authenticated)
	* Route middleware to authenticate the token
	* Route to authenticate a user and password to get the token
	* Route to authenticate a user by facebook,google,twitter to get the token
	* Authenticate routes to get all users

Tools Needed:
	* node and npm 
	* POSTman


our backend will have the following file structure:
	
			- app/
			----- models/
			---------- user.js
			- config.js
			- package.json
			- server.js

#Set up our node application

	First we need to set our package.json file.This is our starting file for my node application.

		So we have added this piece of code in our package.json file

			{
				  "name": "LoginAuthentication",
				  "main": "server.js",
				  "dependencies": {
				    "body-parser": "^1.15.0", // it will let us get paramaters from our post requests
				    "express": "^4.13.4",     // it is node framework
				    "jsonwebtoken": "^5.7.0", // it will be used for generating and verifying web tokens
				    "mongoose": "^4.4.5",	  // used for interaction with database mongoDB
				    "morgan": "^1.7.0",		  // will log requests to console 
				    "bcrypt-nodejs":"latest", // used for encrypting user password
				     "passport" : "~0.1.17",  // used for authentication of user
				     "passport-facebook" : "~1.0.2", // used for facebook authentication
				    "passport-twitter" : "~1.0.2",   // used for twitter authentication
				    "passport-local"   : "~0.1.6",	// used for local login authentication
				    "passport-google-oauth" : "~0.1.5", // used for google authentication
				  }
			}

# Now let's take care of the files that we'll need for our product

	user model (app/models/user.js)

		The user model that we define will be used when creating and getting users.
		to create a moongose model, let's create the file app/models/user.js

					var mongoose = require('mongoose'); // mongoose variable is required for dealing with dbs
					var Schema = mongoose.Schema;// schema will be the soCalled datatype
					var bcrypt = require('bcrypt-nodejs');//bcrypt will be used to encrypt password

					// user schema for database
					var userSchema = mongoose.Schema({
						email : String,
						password : String,
						name : String,
						userId : String,
						facebook_id : String,
						facebook_token : String,
						facebook_email : String,
						facebook_name : String,
						twitter_id : String,
						twitter_token : String,
						twitter_displayName : String,
						twitter_username : String,
						google_id : String,
						google_token : String,
						google_email : String,
						google_name : String
					}); 

					// generating a hash means we are encrypting the password
					userSchema.methods.generateHash = function(password){
						return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
					};

				//for comparing password means when a user will give password during login this function //will compare his given password with the encrypted password which is present in database.

					userSchema.methods.validPassword = function(password){
						return bcrypt.compareSync(password,this.password);
					};

				// create the model for users and expose this model for our server
					module.exports = mongoose.model('User',userSchema);




# The other file we'll need to create is our config.js file,This is where we can store different variables and configuration for our application.

For this file we'll need to create MongoDB database.We can either create it locally or easily use one online at modulus.io for free. Either way we'll need to have a url for our database.
	Here i have created a local databse
		so my url will be "mongodb://localhost/loginapp"

		Now, we will add following lines of code in our config.js file

			// config/database.js
			module.exports = {
				'secret':'adityaAman', // used when we create and verify json web tokens
			    'database' : 'mongodb://localhost/loginapp'{this will be url when created locally}
			    			 'mongodb://<user>:<pass>@jello.modulusmongo.net:27017/xu2Vuxer' 
			    			 	{this will be url when created through modulus.io}
			};

# So we'll now go to our main file which server.js file which will contains all our routes and authentication routes

	In this file, We'll:

		*GRAB ALL PACKAGES-> This will include the packages we installed earlier(express,body-parser,morgan,jwt,passport strategies,etc.) and we'll also be grabbing the model and config that we've created.

		*CONFIG OUR APPLICATION-> We'll set all our important variables, config our packages, and connect to our database here.

		*CREATE BASIC ROUTES-> These are the unprotected routes like the home page (http://localhost:3000). Weâ€™ll also create a /setup route here so that all the information of users gets saved in our database.

		*CREATE API ROUTES-> This includes the following routes:
			*POST http://localhost:3000/api/authenticate
				Check name and password against the database and provide a token if authentication successful.This route will not require a token becoz this where we get a token.

			*GET http://localhost:3000/api
				show a random message.This route is protected by a token and user have to provide a token to access this route.

			*GET http://localhost:3000/api/users
				show all the users which are present in the database. This route is protected by a token.

		*CREATE STRATEGIES-> This includes following strategies:
			*FACEBOOK 
				check token,refreshtoken and profile provided by facebook
				verify the user with facebook provided token and assign a new token and return that user.
			*TWITTER
				check token,refreshtoken and profile provided by twitter
				verify the user with token and assign a new token and return the user 
			*GOOGLE
				same as above two

	With those things in mind lets start our server.js file:

		we'll add these lines of code in our server.js file

						var express   = require('express');
						var app         = express();
						var bodyParser  = require('body-parser');
						var morgan      = require('morgan');
						var mongoose    = require('mongoose');
						var passport = require('passport');

						var FacebookStrategy = require('passport-facebook').Strategy;
						var TwitterStrategy = require('passport-twitter').Strategy;
						var GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;

						var jwt    = require('jsonwebtoken'); // used to create, sign, and verify tokens
						var config = require('./config'); // get our config file
						var User   = require('./app/models/user'); // get our mongoose model
						var configAuth = require('./auth'); // get our authorization file

						// configuration 

						var port = process.env.PORT || 3000; 
						mongoose.connect(config.database); // connect to database
						app.set('superSecret', config.secret); // secret variable

						// use body parser so we can get info from POST and/or URL parameters
						app.use(bodyParser.urlencoded({ extended: false }));
						app.use(bodyParser.json());

						// use morgan to log requests to the console
						app.use(morgan('dev'));

						// routes 
						app.post('/signup', function(req, res) {

						  // create a sample user by taking input from front end
						  var newUser = new User();
						  
						  User.findOne({
						    userId : req.body.userId
						  },function(err,user){

						    // if error throw error;
						    if(err) throw err;

						    // if user exists 
						    if(user){
						      res.json({success : false, message:'UserId already taken!'});
						    }else{
						          // save user details in database
						            newUser.name = req.body.name;
						            newUser.email = req.body.email;
						            newUser.userId = req.body.userId;
						            newUser.password = newUser.generateHash(req.body.password);  
						            admin : true;

						            newUser.save(function(err) {
						                  if (err) throw err;
						              console.log("User saved successfully");
						              res.json({ success: true });
						            });

						    }}); 
						});

						// basic route (http://localhost:3000)
						app.get('/', function(req, res) {
						  res.send('Hello!');
						});

						// get an instance of the router for api routes

						var apiRoutes = express.Router(); 

						// authentication (no middleware necessary since this isnt authenticated)

						// http://localhost:8080/api/authenticate
						apiRoutes.post('/authenticate', function(req, res) {

						  // find the user
						  User.findOne({
						    userId: req.body.userId
						  }, function(err, user) {

						    if (err) throw err;
						    if (!user) {
						      res.json({ success: false, message: 'Authentication failed. User not found.' });
						    } else if (user) {

						      // check if password matches
						      if (!user.validPassword(req.body.password)) {
						        res.json({ success: false, message: 'Authentication failed. Wrong password.' });
						      } else {

						        // if user is found and password is right
						        // create a token
						        var token = jwt.sign(user, app.get('superSecret'), {
						          expiresIn: 86400 // expires in 24 hours
						        });
						        res.json({
						            user : user,
						          success: true,
						          message: 'Enjoy your token!',
						          token: token
						        });

						      }   

						    }

						  });
						});

						// Facebook strategy

						  passport.use(new FacebookStrategy({
						     // pull in our app id and secret from our auth.js file
						        clientID        : configAuth.facebookAuth.clientID,
						        clientSecret    : configAuth.facebookAuth.clientSecret,
						        callbackURL     : configAuth.facebookAuth.callbackURL,
						        passReqToCallback : true // allows us to pass in the req from our route (lets us check if a user is logged in or not)
						  },
						    // facebook will send back the token and profile
						    function(req, token, refreshToken, profile, res) {

						        // asynchronous
						        process.nextTick(function() {

						            // check if the user is already logged in
						            if (!req.user) {

						                // find the user in the database based on their facebook id
						                User.findOne({ 'facebook_id' : profile.id }, function(err, user) {

						                    // if there is an error, stop everything and return that
						                    // ie an error connecting to the database
						                    if (err)
						                        throw err;

						                    // if the user is found, then log them in
						                    if (user) {
						                        if(!user.facebook_token){
						                            user.facebook_token = token;
						                            user.facebook_name =  profile.name.givenName + ' ' + profile.name.familyName;
						                            user.facebook_email = profile.emails[0].value;
						                        }
						                        user.save(function(err){
						                            if(err)
						                                throw err;
						                            res.json(user);
						                        });
						                         // if user is found and password is right
						                        // create a token
						                        var token = jwt.sign(user, app.get('superSecret'), {
						                          expiresIn: 86400 // expires in 24 hours
						                        });

						                        // user found, return that user

						                        res.json({
						                            user : user,
						                          success: true,
						                          message: 'Enjoy your token!',
						                          token: token
						                        });

						                    } else {
						                        // if there is no user found with that facebook id, create them
						                        var newUser            = new User();

						                        // set all of the facebook information in our user model
						                        newUser.facebook_id    = profile.id; // set the users facebook id                   
						                        newUser.facebook_token = token; // we will save the token that facebook provides to the user                    
						                        newUser.facebook_name  = profile.name.givenName + ' ' + profile.name.familyName; // look at the passport user profile to see how names are returned
						                        newUser.facebook_email = profile.emails[0].value; // facebook can return multiple emails so we'll take the first

						                        // save our user to the database
						                        newUser.save(function(err) {
						                            if (err)
						                                throw err;

						                            // if successful, return the new user with the token
						                             // create a token
						                            var token = jwt.sign(newUser, app.get('superSecret'), {
						                              expiresIn: 86400 // expires in 24 hours
						                            });

						                            // user found, return that user

						                            res.json({
						                              user : newUser,
						                              success: true,
						                              message: 'Enjoy your token!',
						                              token: token
						                            });
						                        });
						                    }

						                });

						            } else {
						                // user already exists and is logged in, we have to link accounts
						                var user            = req.user; // pull the user out of the session

						                // update the current users facebook credentials
						                user.facebook_id    = profile.id;
						                user.facebook_token = token;
						                user.facebook_name  = profile.name.givenName + ' ' + profile.name.familyName;
						                user.facebook_email = profile.emails[0].value;

						                // save the user
						                user.save(function(err) {
						                    if (err)
						                        throw err;
						                     // create a token
						                     var token = jwt.sign(user, app.get('superSecret'), {
						                        expiresIn: 86400 // expires in 24 hours
						                        });
						                        // after creating the token assign it to user and return
						                        res.json({
						                          user : user,
						                          success: true,
						                          message: 'Enjoy your token!',
						                          token: token
						                        });
						                });
						            }

						        });

						  }));

						// google strategy

						passport.use(new GoogleStrategy({

						        // pull in our app id and secret from our auth.js file
						        clientID        : configAuth.googleAuth.clientID,
						        clientSecret    : configAuth.googleAuth.clientSecret,
						        callbackURL     : configAuth.googleAuth.callbackURL,
						        passReqToCallback : true // allows us to pass in the req from our route (lets us check if a user is logged in or not)

						    },

						    // facebook will send back the token and profile
						    function(req, token, refreshToken, profile, res) {

						        // asynchronous
						        process.nextTick(function() {

						            // check if the user is already logged in
						            if (!req.user) {

						                // find the user in the database based on their google id
						                User.findOne({ 'google_id' : profile.id }, function(err, user) {

						                    // if there is an error, stop everything and return that
						                    // ie an error connecting to the database
						                    if (err)
						                        throw err;

						                    // if the user is found, then log them in
						                    if (user) {
						                         // if there is a user id already but no token (user was linked at one point and then removed)
						                        // just add our token and profile information
						                        if(!user.google_token)
						                        {
						                            user.google_token = token;
						                            user.google_name = profile.displayName;
						                            user.google_email = profile.emails[0].value;
						                        }
						                        user.save(function(err) {
						                                if (err)
						                                    throw err;
						                                res.json(user);
						                            });

						                       // create a token and return user
						                     var token = jwt.sign(user, app.get('superSecret'), {
						                        expiresIn: 86400 // expires in 24 hours
						                        });
						                        // after creating the token assign it to user and return
						                        res.json({
						                          user : user,
						                          success: true,
						                          message: 'Enjoy your token!',
						                          token: token
						                        }); 
						                    } else {
						                        // if there is no user found with that google id, create them
						                        var newUser            = new User();
						                    
						                    //set all of the relevant information
						                    newUser.google_id    = profile.id;  //save the profile id in a new variable in newUser.google.id
						                    newUser.google_token = token;   //save the token value in a new variable
						                    newUser.google_name  = profile.displayName; // save the display name in a new variable
						                    newUser.google_email = profile.emails[0].value; // pull the first email

						                        // save our user to the database
						                        newUser.save(function(err) {
						                            if (err)
						                                throw err;

						                             // create a token and return user
						                            var token = jwt.sign(newUser, app.get('superSecret'), {
						                                expiresIn: 86400 // expires in 24 hours
						                            });
						                            // after creating the token assign it to user and return
						                            res.json({
						                                 user : newUser,
						                                 success: true,
						                                 message: 'Enjoy your token!',
						                                 token: token
						                            }); 

						                        });
						                    }

						                });

						            } else {
						                // user already exists and is logged in, we have to link accounts
						                var user            = req.user; // pull the user out of the session

						                // update the current users google credentials
						                user.google_id    = profile.id;
						                user.google_token = token;
						                user.google_name  = profile.name.givenName + ' ' + profile.name.familyName;
						                user.google_email = profile.emails[0].value;

						                // save the user
						                user.save(function(err) {
						                    if (err)
						                        throw err;
						                     // create a token and return user
						                            var token = jwt.sign(user, app.get('superSecret'), {
						                                expiresIn: 86400 // expires in 24 hours
						                            });
						                            // after creating the token assign it to user and return
						                            res.json({
						                                 user : user,
						                                 success: true,
						                                 message: 'Enjoy your token!',
						                                 token: token
						                            }); 
						                });
						            }

						        });

						    }));


						// twitter strategy

						 passport.use(new TwitterStrategy({

						        consumerKey     : configAuth.twitterAuth.consumerKey,
						        consumerSecret  : configAuth.twitterAuth.consumerSecret,
						        callbackURL     : configAuth.twitterAuth.callbackURL,
						        passReqToCallback : true // allows us to pass in the req from our route (lets us check if a user is logged in or not)

						    },
						    function(req, token, tokenSecret, profile, res) {

						        // asynchronous
						        process.nextTick(function() {

						            // check if the user is already logged in
						            if (!req.user) {

						                User.findOne({ 'twitter_id' : profile.id }, function(err, user) {
						                    if (err)
						                        throw err;

						                    if (user) {
						                        // if there is a user id already but no token (user was linked at one point and then removed)
						                        if (!user.twitter_token) {
						                            user.twitter_token       = token;
						                            user.twitter_username    = profile.username;
						                            user.twitter_displayName = profile.displayName;

						                            user.save(function(err) {
						                                if (err)
						                                    throw err;
						                                // create a token and return user
						                            var token = jwt.sign(user, app.get('superSecret'), {
						                                expiresIn: 86400 // expires in 24 hours
						                            });
						                            // after creating the token assign it to user and return
						                            res.json({
						                                 user : user,
						                                 success: true,
						                                 message: 'Enjoy your token!',
						                                 token: token
						                            }); 
						                            });
						                        }

						                        res.json(user); // user found, return that user
						                    } else {
						                        // if there is no user, create them
						                        var newUser                 = new User();

						                        newUser.twitter_id          = profile.id;
						                        newUser.twitter_token       = token;
						                        newUser.twitter_username    = profile.username;
						                        newUser.twitter_displayName = profile.displayName;

						                        newUser.save(function(err) {
						                            if (err)
						                                throw err;
						                            // create a token and return user
						                            var token = jwt.sign(newUser, app.get('superSecret'), {
						                                expiresIn: 86400 // expires in 24 hours
						                            });
						                            // after creating the token assign it to user and return
						                            res.json({
						                                 user : newUser,
						                                 success: true,
						                                 message: 'Enjoy your token!',
						                                 token: token
						                            }); 
						                        });
						                    }
						                });

						            } else {
						                // user already exists and is logged in, we have to link accounts
						                var user                 = req.user; // pull the user out of the session

						                user.twitter_id          = profile.id;
						                user.twitter_token       = token;
						                user.twitter_username    = profile.username;
						                user.twitter_displayName = profile.displayName;

						                user.save(function(err) {
						                    if (err)
						                        throw err;
						                    // create a token and return user
						                            var token = jwt.sign(user, app.get('superSecret'), {
						                                expiresIn: 86400 // expires in 24 hours
						                            });
						                            // after creating the token assign it to user and return
						                            res.json({
						                                 user : user,
						                                 success: true,
						                                 message: 'Enjoy your token!',
						                                 token: token
						                            }); 
						                });
						            }

						        });

						    }));

						// route middleware to authenticate and check token

						apiRoutes.use(function(req, res, next) {

						  // check header or url parameters or post parameters for token
						  var token = req.body.token || req.param('token') || req.headers['x-access-token'];

						  // decode token
						  if (token) {

						    // verifies secret and checks exp
						    jwt.verify(token, app.get('superSecret'), function(err, decoded) {      
						      if (err) {
						        return res.json({ success: false, message: 'Failed to authenticate token.' });    
						      } else {
						        // if everything is good, save to request for use in other routes
						        req.decoded = decoded;  
						        next();
						      }
						    });

						  } else {

						    // if there is no token
						    // return an error
						    return res.status(403).send({ 
						      success: false, 
						      message: 'No token provided.'
						    });
						    
						  }
						  
						});


						// authenticated routes

						apiRoutes.get('/', function(req, res) {
						  res.json({ message: 'Welcome to the coolest API on earth!' });
						});

						apiRoutes.get('/users', function(req, res) {
						  User.find({}, function(err, users) {
						    res.json(users);
						  });
						});

						apiRoutes.get('/check', function(req, res) {
						  res.json(req.decoded);
						});

						app.use('/api', apiRoutes);

						// start the server 

						app.listen(port);
						console.log('Magic happens at http://localhost:' + port);



	For the api calls i have used POSTman tool to check for correct data.

	# Why we are Authenticating and creating a token ?


		Here we will accept the user_id and its password, if the all the credentials validate, then we'll
		create a token and pass that back. Once the user has that token, they will store it client side and pass it with every requests for information after that and we will validate the token on every request using route middleware.

		*Using of web token increases the scalability of product, server has not to store the session of user and in this way increases the usage of the server.

		*We are using mongoose and json web token to find the user and create the web token respectively.

		*We are also making sure to send the right HTTP response code as 403 forbidden and our user will not have authentication to view any data.

		*By using postman we can check that our code is functional or not.We can pass user information through postman or through url.


	**********************************Conclusion**********************************************

	** This is a good look at how we can protect routes and our node API using JSON web token.
	   This can be expanded at a larger scale to provide permission to specific tokens and creating a more robust and featured filled API.
	   
	   We can provide two separate type of tokens like authentication tokens and authorization tokens.




IMPORTANT LINKS : 
	
	* https://devdactic.com/restful-api-user-authentication-1/
	* https://scotch.io/
	* https://www.youtube.com/watch?v=Z1ktxiqyiLA 